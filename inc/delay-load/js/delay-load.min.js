"use strict"; (() => { var e = document.body.getBoundingClientRect().top, t = !0; window.localStorage.getItem("debloat_user") ? t = !1 : (window.localStorage.setItem("debloat_user", "debloat_user"), t = !0); let a = window.debloatConfig || {}, n = [], r = { HTMLDocument: document.addEventListener.bind(document), Window: window.addEventListener.bind(window) }, o = {}, d, s = !1, l = !1, c = !1, i = !1, u = !1, f = [], y = []; function h() { if (t) g(), p(); else { let e = [...document.querySelectorAll("script[data-debloat-delay]")], a = [...document.querySelectorAll("link[data-debloat-delay]")], n = e.filter(e => e.src && (e.src.includes("jquery") || e.dataset.src && e.dataset.src.includes("jquery"))), r = e.filter(e => !e.src || !e.src.includes("jquery") && (!e.dataset.src || !e.dataset.src.includes("jquery"))); n.forEach(e => m(e)), setTimeout(() => { r.forEach(e => m(e)) }, 50), a.forEach(e => m(e)) } document.addEventListener("debloat-load-css", () => p(!0)), document.addEventListener("debloat-load-js", () => g(!0)) } function g(e) { (f = [...document.querySelectorAll("script[data-debloat-delay]")]).length && (j(), E("js", e)) } function p(e) { (y = [...document.querySelectorAll("link[data-debloat-delay]")]).length && E("css", e) } function E(e, t) { e = e || "js"; let n = t ? "onload" : a[e + "DelayType"] || "onload", r = "js" === e ? v : b; switch ("js" === e && (t || "onload" === n ? L() : _(L)), n) { case "onload": _(() => r(t)); break; case "interact": let o = !1, d = () => { !o && (o = !0, "js" === e ? w(() => setTimeout(r, 2)) : r()) };["mousemove", "mousedown", "keydown", "touchstart", "wheel"].forEach(e => { document.addEventListener(e, d, { passive: !0, once: !0 }) }), "js" === e && a.jsDelayMax && w(() => setTimeout(d, 1e3 * a.jsDelayMax)); break; case "custom-delay": _(() => { let e = 1e3 * parseInt(element.dataset.customDelay); setTimeout(r, e) }) } } function b() { y.forEach(e => m(e)) } function v(e) { if (L(), !e) { c = !0, d = document.readyState; let t = "loading"; Object.defineProperty(document, "readyState", { configurable: !0, get: () => t, set: e => t = e }) } let a, r = new Promise(e => a = e), o = () => { if (!f.length) { a(); return } let e = m(f.shift()); e.then(o) }; o(), r.then(S).catch(e => { console.error(e), S() }), setTimeout(() => !n.length || S(), 45e3) } function L(e) { !u && (u = !0, f.forEach(t => { let a = t.src || t.dataset.src; if (!a) return; let n = document.createElement("link"); Object.assign(n, { rel: e || "preload", as: "script", href: a, ...t.crossOrigin && { crossOrigin: t.crossOrigin } }), document.head.append(n) })) } function m(e) { let t, a = e.dataset.src, n = e => new Promise(t => { e.addEventListener("load", t), e.addEventListener("error", t) }); if (a) { let r = document.createElement("script"); t = n(r), e.getAttributeNames().forEach(t => { "src" === t || (r[t] = e[t]) }), r.async = !1, r.src = a, e.parentNode.replaceChild(r, e) } else e.type && "text/debloat-script" === e.type && (e.type = e.dataset.type || "text/javascript", e.text += " "); let o = e.dataset.href; return o && (t = n(e), e.href = o), ["debloatDelay", "src"].forEach(t => { e.dataset[t] = "", delete e.dataset[t] }), t || Promise.resolve() } function j() { if (s) return; s = !0; let e = (e, t) => { t.addEventListener(e, t => o[e] = t) }; e("DOMContentLoaded", document), e("load", window), e("readystatechange", document), e("pageshow", window); let t = function (e, t, ...a) { if (c && !l && ["readystatechange", "DOMContentLoaded", "load", "pageshow"].includes(e)) { console.log("Adding: ", e, t, a), n.push({ event: e, cb: t, context: this, args: a }); return } r[this.constructor.name] && r[this.constructor.name].call(this, e, t, ...a) }; document.addEventListener = t.bind(document), window.addEventListener = t.bind(window), Object.defineProperty(window, "onload", { set(e) { window.addEventListener("load", e) } }) } function $(e) { try { e.cb.call(e.context, o[e.event], ...e.args) } catch (t) { console.error(t) } } function S() { if (i) return; console.log("Firing Load Events", n), i = !0; let e = n.filter(e => "readystatechange" === e.event); for (let t of (document.readyState = "interactive", e.forEach(e => $(e)), n)) "DOMContentLoaded" === t.event && $(t); for (let a of n) "load" === a.event && $(a); n = [], i = !1, l = !0, c = !1, _(() => { document.readyState = "complete", setTimeout(() => { e.forEach(e => $(e)) }, 2) }) } function _(e) { let t = d || document.readyState; "complete" === t ? e() : r.Window("load", () => e()) } function w(e) { "loading" !== document.readyState ? e() : r.Window("DOMContentLoaded", () => e()) } h() })();